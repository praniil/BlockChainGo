package main

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"encoding/json"
	"encoding/pem"
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
)

type Block struct {
	data      map[string]interface{}
	hash      string
	prevHash  string
	timestamp time.Time
	nonce     int
}

type userProfile struct {
	name string
	publicKey rsa.PublicKey
	privateKey rsa.PrivateKey
	TotalBitcoin float32
}

//Blockchain containing Blocks
type BlockChain struct {
	genesisBlock Block
	chain        []Block
	target       int
}

//to include a block into a blockchain a miner mines a new block calculating a hash puzzle
//calculation of the hash of the block
//it includes the hashing of transactions(data), nonce, prevHash to create the new hash of the block
func (user *userProfile) generateKeyPair (){
	privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		fmt.Println("Error generating RSA private key:", err)
		os.Exit(1)		//0 indicated success and non zero indicate non success
	}

	privateKeyPEM := &pem.Block{
		Type: "RSA PRIVATE KEY",
		Bytes: x509.MarshalPKCS1PrivateKey(privateKey),
	}

	privateKeyFile, err := os.Create(user.name + "privateKey.pem")
	if err != nil {
		fmt.Println("Error creating private key file: ", err)
		os.Exit(1)
	}

	//encode it into a pem file
	pem.Encode(privateKeyFile, privateKeyPEM)
	privateKeyFile.Close()

	publicKey := &privateKey.PublicKey
	
	publicKeyFile, err := os.Create(user.name + "publicKey.pem")
	if err != nil {
		fmt.Println("Error creating public key file: ", err)
		os.Exit(1)
	}

	publicKeyPem := &pem.Block{
		Type: "RSA PUBLIC KEY",
		Bytes: x509.MarshalPKCS1PublicKey(publicKey),
	}

	pem.Encode(publicKeyFile, publicKeyPem)
	publicKeyFile.Close()
	user.privateKey = *privateKey
	user.publicKey = *publicKey
	fmt.Printf("User: %s \n, public key: %v \n, private Key: %v \n", user.name, user.publicKey, user.privateKey)
}

func (user *userProfile) createUser (name string) {
	//amount hard coded, public and private key generated by generateKeyPair
	user.name = name
	user.generateKeyPair()
}

func (b Block) calculateHash() string {
	data, err := json.Marshal(b.data)
	if err != nil {
		fmt.Printf("error in encoding the data: %v", err)
	}
	blockData := b.prevHash + string(data) + b.timestamp.String() + strconv.Itoa(b.nonce)
	newHash := sha256.Sum256([]byte(blockData))
	return fmt.Sprintf("%x", newHash)
}

func (b *Block) mine (target int) {
	for !strings.HasPrefix(b.hash, strings.Repeat("0", target)) {
		b.nonce++
		b.hash = b.calculateHash()
	} 
}

func CreatBlockchain(target int) BlockChain{
	genesisblock := Block{
		hash: "0",
		timestamp: time.Now(),
	}
	return BlockChain{
		genesisblock, 
		[]Block{genesisblock}, 
		target,
	}
}

func (b *BlockChain) addBlock (from, to string, amount float64) {
	blockData := map[string]interface{}{
		"from" : from, 
		"to" : to,
		"amount" : amount,
	}
	prevBlock := b.chain[len(b.chain) - 1]
	newBlock := Block{
		data : blockData, 
		prevHash: prevBlock.hash,
		timestamp: time.Now(),
	}
	newBlock.mine(b.target)
	b.chain = append(b.chain, newBlock)
}

func (b *BlockChain) isValid() bool{
	for i:= range b.chain[1:] {
		previousBlock := b.chain[i]
		currentBlock := b.chain[i + 1]
		if currentBlock.hash != currentBlock.calculateHash() || currentBlock.prevHash != previousBlock.hash{
			return false
		}
	}
	return true
}

func main() {
	blockchain := CreatBlockchain(2)
	var userAlice, userBob userProfile
	userAlice.createUser("Alice")
	userBob.createUser("Bob")
	blockchain.addBlock("Alice", "Bob", 5)
	blockchain.addBlock("John", "Bob", 2)
	// fmt.Println(blockchain.chain)
	// fmt.Println(blockchain.isValid())

}
